Transmission Control Protocol (TCP) is a communications standard that enables application programs to exchange messages over a network.
    HTTP protocol:
    HTTP is unidirectional where the client sends the request and the server sends the response,after sending the response the connection gets closed,
    each HTTP request establish the new connection to the server every time and after getting the response the connection gets terminated by itself.
        When to use HTTP protocol:
            ~ If we want to fetch old data, or want to get the data only once to process it with an application.

    WebSocket:
    WebSocket enabling bidirectional communication between client and server in real-time. Unlike HTTP it starts from ws:// or wss://.
    It is a stateful protocol, which means the connection between client and server will keep alive until it is terminated by either client or server.

    WebSocket begins with an HTTP handshake between the client and server, during which the client requests an upgrade to the WebSocket protocol.
     Once the upgrade is accepted by the server, the connection switches from HTTP to WebSocket, enabling full-duplex(двухсторонній зв'язок) communication.

        When to use WebSocket:
            ~ Real-time web application:to show the data at the client end, which is continuously being sent by the backend server.
              In a trading website or bitcoin trading.
            ~ Gaming application: data is continuously received by the server, and without refreshing the UI, it will take effect on the screen.
            ~ Chat application: for sending and receiving the message and for one-to-one message transfer.

TextWebSocketHandler - is a base class for handling WebSocket messages of type TextMessage.
handleTextMessage method is called when a text message is received on the WebSocket connection.

@EnableWebSocket enables WebSocket support in the Spring application.

WebSocketConfigurer is a Spring interface for configuring WebSocket handlers.
WebSocketSession represents a single WebSocket connection between a client and a server.

@Document specifies the mapping between the Java class and the MongoDB collection.
@MongoId marks the primary key field.

@EnableScheduling allows to define methods that should be executed at regular intervals or according to a specific schedule.
@Scheduled marks methods that should be invoked based on a schedule.

