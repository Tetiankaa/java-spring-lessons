Authentication is the process of verifying the identity of a user (username, password, biometric data).
Authorization is the process of determining whether a user or entity has permission to access a specific resource or perform a particular action within a system.
    In summary, authentication verifies the identity of users, while authorization controls what authenticated users are allowed to do within a system or application.

The primary purpose of JWT is to securely transmit information between parties as a JSON object.
    ~ JWTs are commonly used as authentication tokens in web applications and APIs. After a user successfully logs in, the server generates a JWT containing information about the user
    (such as user ID, username, role, etc.) and signs it with a secret key. This token is then sent back to the client, typically in the response body or as a cookie.
    ~ Subsequent requests from the client include the JWT in the Authorization header, allowing the server to verify the user's identity without needing to store session state
    on the server side. The server can validate the JWT's signature to ensure its authenticity and extract the user's information from the token.
    ~ JWTs can also carry authorization claims (запити на авторизацію), specifying what actions or resources the user is allowed to access.

Key - holds the cryptographic key used for signing and verifying JWT tokens.

@PostConstruct - method that is annotated with it means it will be executed after the bean has been constructed and all dependencies have been injected.

Jwts.parserBuilder() is used to create a JWT parser instance and configures it with the cryptographic key (.setSigningKey())
The parser parses the token (parseClaimsJwt()) and retrieves its payload (.getBody())

By employing Cryptographic algorithms, organizations can protect sensitive data, authenticate users, prevent unauthorized access, and ensure the integrity of transmitted information.

HMAC-SHA256 algorithm is used to create a digital signature for the token. When generating a JWT, the token's payload (claims) is first encoded into a JSON format.
Then, this payload is hashed using SHA-256 along with a secret key known only to the issuer. This hashed value, along with the header, forms the token's signature.
This signature is appended to the token, and the resulting JWT is transmitted to the recipient.

OncePerRequestFilter class ensures that the doFilterInternal method is only executed once per request.

userDetailsService is a service responsible for loading user details.

SecurityContext holds the details of the currently authenticated principal (user), it's credentials, and it's authorities (roles).
  The primary purpose of SecurityContext is to manage security-related information for the current thread.

UsernamePasswordAuthenticationToken is a class that represents an authentication request token.
 When a user attempts to authenticate themselves, their credentials are encapsulated in a UsernamePasswordAuthenticationToken and passed through the authentication process.
  This token is then processed by authentication providers to verify the user's identity and establish authentication.

AuthenticationManager responsible for authenticating users against the UserDetailsService.
DaoAuthenticationProvider used to authenticate users against a database or a data access object (DAO).

HttpSecurity configure security settings for HTTP requests.

CSRF (Cross-Site Request Forgery): is a type of attack where an attacker tricks a user into performing actions on a website without their knowledge or consent.
     To mitigate CSRF attacks, Spring Security provides CSRF protection by default.

CORS (Cross-Origin Resource Sharing):is a security feature to restrict web page resources (such as JavaScript) from being requested from another domain.

Session management allows to control how sessions are handled for authenticated users.
  In a stateless session management policy, no session is created or maintained for authenticated users.

UsernamePasswordAuthenticationFilter is a built-in Spring Security filter responsible for processing username/password-based authentication requests.

WebAuthenticationDetailsSource is a class provided by Spring Security that is responsible for creating WebAuthenticationDetails objects.
  These objects contain details about the authentication request that are specific to web-based authentication mechanisms.

AuthenticationEntryPoint responsible for handling authentication failures.

Refresh Token Expiration: The refresh token should have a longer expiration time than the access token because its purpose is to provide a way to obtain a new access token
when the current one expires.
Since the refresh token is used less frequently than the access token, it is typically set to last longer.

Access Token Expiration: The access token has a shorter expiration time because it is used for authentication and authorization in each request.
It should be short-lived to minimize the risk of unauthorized access if it is stolen.
